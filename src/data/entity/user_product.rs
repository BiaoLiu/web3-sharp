//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;
use crate::data::entity::product::ProductModel;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user_product")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub user_id: i64,
    pub product_id: i64,
    pub status: i8,
    pub created_at: DateTime,
    pub updated_at: DateTime,

    #[sea_orm(ignore)]
    pub product: Option<ProductModel>,
}

pub type UserProductModel = Model;

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Product,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Product => Entity::belongs_to(super::product::Entity)
                .from(Column::ProductId)
                .to(super::product::Column::Id)
                .into(),
        }
    }
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Product.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
